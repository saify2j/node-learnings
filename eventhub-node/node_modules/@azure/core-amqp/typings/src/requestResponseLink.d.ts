import { AbortSignalLike } from "@azure/abort-controller";
import { Session, Connection, Sender, Receiver, Message as AmqpMessage, SenderOptions, ReceiverOptions, ReqResLink } from "rhea-promise";
/**
 * Describes the options that can be specified while sending a request.
 * @interface SendRequestOptions
 */
export interface SendRequestOptions {
    /**
     * @property {AbortSignalLike} [abortSignal] Cancels the operation.
     */
    abortSignal?: AbortSignalLike;
    /**
     * @property {number} [timeoutInMs] Max time to wait for the operation to complete.
     * Default: `60000 milliseconds`.
     */
    timeoutInMs?: number;
    /**
     * @property {string} [requestName] Name of the request being performed.
     */
    requestName?: string;
}
/**
 * Describes an amqp request(sender)-response(receiver) link that is created over an amqp session.
 * @class RequestResponseLink
 */
export declare class RequestResponseLink implements ReqResLink {
    session: Session;
    sender: Sender;
    receiver: Receiver;
    /**
     * @constructor
     * @param {Session} session The amqp session.
     * @param {Sender} sender The amqp sender link.
     * @param {Receiver} receiver The amqp receiver link.
     */
    constructor(session: Session, sender: Sender, receiver: Receiver);
    /**
     * Provides the underlying amqp connection object.
     * @returns {Connection} Connection.
     */
    readonly connection: Connection;
    /**
     * Indicates whether the session and the sender and receiver links are all open or closed.
     * @returns {boolean} boolean - `true` - `open`, `false` - `closed`.
     */
    isOpen(): boolean;
    /**
     * Sends the given request message and returns the received response. If the operation is not
     * completed in the provided timeout in milliseconds `default: 60000`, then `OperationTimeoutError` is thrown.
     *
     * @param {Message} request The AMQP (request) message.
     * @param {SendRequestOptions} [options] Options that can be provided while sending a request.
     * @returns {Promise<Message>} Promise<Message> The AMQP (response) message.
     */
    sendRequest(request: AmqpMessage, options?: SendRequestOptions): Promise<AmqpMessage>;
    /**
     * Closes the sender, receiver link and the underlying session.
     * @returns {Promise<void>} Promise<void>
     */
    close(): Promise<void>;
    /**
     * Removes the sender, receiver link and it's underlying session.
     * @returns {void} void
     */
    remove(): void;
    /**
     * Creates an amqp request/response link.
     *
     * @param {Connection} connection The amqp connection.
     * @param {SenderOptions} senderOptions Options that must be provided to create the sender link.
     * @param {ReceiverOptions} receiverOptions Options that must be provided to create the receiver link.
     * @returns {Promise<RequestResponseLink>} Promise<RequestResponseLink>
     */
    static create(connection: Connection, senderOptions: SenderOptions, receiverOptions: ReceiverOptions): Promise<RequestResponseLink>;
}
//# sourceMappingURL=requestResponseLink.d.ts.map